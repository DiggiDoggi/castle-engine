{ This file is automatically generated by generate_webgl_flat_api. }
{$ifdef read_interface}

{ Constants from WebGLRenderingContextBase }
const
  GL_DEPTH_BUFFER_BIT = TJSWebGLRenderingContextBase.DEPTH_BUFFER_BIT;
  GL_STENCIL_BUFFER_BIT = TJSWebGLRenderingContextBase.STENCIL_BUFFER_BIT;
  GL_COLOR_BUFFER_BIT = TJSWebGLRenderingContextBase.COLOR_BUFFER_BIT;
  GL_POINTS = TJSWebGLRenderingContextBase.POINTS;
  GL_LINES = TJSWebGLRenderingContextBase.LINES;
  GL_LINE_LOOP = TJSWebGLRenderingContextBase.LINE_LOOP;
  GL_LINE_STRIP = TJSWebGLRenderingContextBase.LINE_STRIP;
  GL_TRIANGLES = TJSWebGLRenderingContextBase.TRIANGLES;
  GL_TRIANGLE_STRIP = TJSWebGLRenderingContextBase.TRIANGLE_STRIP;
  GL_TRIANGLE_FAN = TJSWebGLRenderingContextBase.TRIANGLE_FAN;
  GL_ZERO = TJSWebGLRenderingContextBase.ZERO;
  GL_ONE = TJSWebGLRenderingContextBase.ONE;
  GL_SRC_COLOR = TJSWebGLRenderingContextBase.SRC_COLOR;
  GL_ONE_MINUS_SRC_COLOR = TJSWebGLRenderingContextBase.ONE_MINUS_SRC_COLOR;
  GL_SRC_ALPHA = TJSWebGLRenderingContextBase.SRC_ALPHA;
  GL_ONE_MINUS_SRC_ALPHA = TJSWebGLRenderingContextBase.ONE_MINUS_SRC_ALPHA;
  GL_DST_ALPHA = TJSWebGLRenderingContextBase.DST_ALPHA;
  GL_ONE_MINUS_DST_ALPHA = TJSWebGLRenderingContextBase.ONE_MINUS_DST_ALPHA;
  GL_DST_COLOR = TJSWebGLRenderingContextBase.DST_COLOR;
  GL_ONE_MINUS_DST_COLOR = TJSWebGLRenderingContextBase.ONE_MINUS_DST_COLOR;
  GL_SRC_ALPHA_SATURATE = TJSWebGLRenderingContextBase.SRC_ALPHA_SATURATE;
  GL_FUNC_ADD = TJSWebGLRenderingContextBase.FUNC_ADD;
  GL_BLEND_EQUATION = TJSWebGLRenderingContextBase.BLEND_EQUATION;
  GL_BLEND_EQUATION_RGB = TJSWebGLRenderingContextBase.BLEND_EQUATION_RGB;
  GL_BLEND_EQUATION_ALPHA = TJSWebGLRenderingContextBase.BLEND_EQUATION_ALPHA;
  GL_FUNC_SUBTRACT = TJSWebGLRenderingContextBase.FUNC_SUBTRACT;
  GL_FUNC_REVERSE_SUBTRACT = TJSWebGLRenderingContextBase.FUNC_REVERSE_SUBTRACT;
  GL_BLEND_DST_RGB = TJSWebGLRenderingContextBase.BLEND_DST_RGB;
  GL_BLEND_SRC_RGB = TJSWebGLRenderingContextBase.BLEND_SRC_RGB;
  GL_BLEND_DST_ALPHA = TJSWebGLRenderingContextBase.BLEND_DST_ALPHA;
  GL_BLEND_SRC_ALPHA = TJSWebGLRenderingContextBase.BLEND_SRC_ALPHA;
  GL_CONSTANT_COLOR = TJSWebGLRenderingContextBase.CONSTANT_COLOR;
  GL_ONE_MINUS_CONSTANT_COLOR = TJSWebGLRenderingContextBase.ONE_MINUS_CONSTANT_COLOR;
  GL_CONSTANT_ALPHA = TJSWebGLRenderingContextBase.CONSTANT_ALPHA;
  GL_ONE_MINUS_CONSTANT_ALPHA = TJSWebGLRenderingContextBase.ONE_MINUS_CONSTANT_ALPHA;
  GL_BLEND_COLOR = TJSWebGLRenderingContextBase.BLEND_COLOR;
  GL_ARRAY_BUFFER = TJSWebGLRenderingContextBase.ARRAY_BUFFER;
  GL_ELEMENT_ARRAY_BUFFER = TJSWebGLRenderingContextBase.ELEMENT_ARRAY_BUFFER;
  GL_ARRAY_BUFFER_BINDING = TJSWebGLRenderingContextBase.ARRAY_BUFFER_BINDING;
  GL_ELEMENT_ARRAY_BUFFER_BINDING = TJSWebGLRenderingContextBase.ELEMENT_ARRAY_BUFFER_BINDING;
  GL_STREAM_DRAW = TJSWebGLRenderingContextBase.STREAM_DRAW;
  GL_STATIC_DRAW = TJSWebGLRenderingContextBase.STATIC_DRAW;
  GL_DYNAMIC_DRAW = TJSWebGLRenderingContextBase.DYNAMIC_DRAW;
  GL_BUFFER_SIZE = TJSWebGLRenderingContextBase.BUFFER_SIZE;
  GL_BUFFER_USAGE = TJSWebGLRenderingContextBase.BUFFER_USAGE;
  GL_CURRENT_VERTEX_ATTRIB = TJSWebGLRenderingContextBase.CURRENT_VERTEX_ATTRIB;
  GL_FRONT = TJSWebGLRenderingContextBase.FRONT;
  GL_BACK = TJSWebGLRenderingContextBase.BACK;
  GL_FRONT_AND_BACK = TJSWebGLRenderingContextBase.FRONT_AND_BACK;
  GL_CULL_FACE = TJSWebGLRenderingContextBase.CULL_FACE;
  GL_BLEND = TJSWebGLRenderingContextBase.BLEND;
  GL_DITHER = TJSWebGLRenderingContextBase.DITHER;
  GL_STENCIL_TEST = TJSWebGLRenderingContextBase.STENCIL_TEST;
  GL_DEPTH_TEST = TJSWebGLRenderingContextBase.DEPTH_TEST;
  GL_SCISSOR_TEST = TJSWebGLRenderingContextBase.SCISSOR_TEST;
  GL_POLYGON_OFFSET_FILL = TJSWebGLRenderingContextBase.POLYGON_OFFSET_FILL;
  GL_SAMPLE_ALPHA_TO_COVERAGE = TJSWebGLRenderingContextBase.SAMPLE_ALPHA_TO_COVERAGE;
  GL_SAMPLE_COVERAGE = TJSWebGLRenderingContextBase.SAMPLE_COVERAGE;
  GL_NO_ERROR = TJSWebGLRenderingContextBase.NO_ERROR;
  GL_INVALID_ENUM = TJSWebGLRenderingContextBase.INVALID_ENUM;
  GL_INVALID_VALUE = TJSWebGLRenderingContextBase.INVALID_VALUE;
  GL_INVALID_OPERATION = TJSWebGLRenderingContextBase.INVALID_OPERATION;
  GL_OUT_OF_MEMORY = TJSWebGLRenderingContextBase.OUT_OF_MEMORY;
  GL_CW = TJSWebGLRenderingContextBase.CW;
  GL_CCW = TJSWebGLRenderingContextBase.CCW;
  GL_LINE_WIDTH = TJSWebGLRenderingContextBase.LINE_WIDTH;
  GL_ALIASED_POINT_SIZE_RANGE = TJSWebGLRenderingContextBase.ALIASED_POINT_SIZE_RANGE;
  GL_ALIASED_LINE_WIDTH_RANGE = TJSWebGLRenderingContextBase.ALIASED_LINE_WIDTH_RANGE;
  GL_CULL_FACE_MODE = TJSWebGLRenderingContextBase.CULL_FACE_MODE;
  GL_FRONT_FACE = TJSWebGLRenderingContextBase.FRONT_FACE;
  GL_DEPTH_RANGE = TJSWebGLRenderingContextBase.DEPTH_RANGE;
  GL_DEPTH_WRITEMASK = TJSWebGLRenderingContextBase.DEPTH_WRITEMASK;
  GL_DEPTH_CLEAR_VALUE = TJSWebGLRenderingContextBase.DEPTH_CLEAR_VALUE;
  GL_DEPTH_FUNC = TJSWebGLRenderingContextBase.DEPTH_FUNC;
  GL_STENCIL_CLEAR_VALUE = TJSWebGLRenderingContextBase.STENCIL_CLEAR_VALUE;
  GL_STENCIL_FUNC = TJSWebGLRenderingContextBase.STENCIL_FUNC;
  GL_STENCIL_FAIL = TJSWebGLRenderingContextBase.STENCIL_FAIL;
  GL_STENCIL_PASS_DEPTH_FAIL = TJSWebGLRenderingContextBase.STENCIL_PASS_DEPTH_FAIL;
  GL_STENCIL_PASS_DEPTH_PASS = TJSWebGLRenderingContextBase.STENCIL_PASS_DEPTH_PASS;
  GL_STENCIL_REF = TJSWebGLRenderingContextBase.STENCIL_REF;
  GL_STENCIL_VALUE_MASK = TJSWebGLRenderingContextBase.STENCIL_VALUE_MASK;
  GL_STENCIL_WRITEMASK = TJSWebGLRenderingContextBase.STENCIL_WRITEMASK;
  GL_STENCIL_BACK_FUNC = TJSWebGLRenderingContextBase.STENCIL_BACK_FUNC;
  GL_STENCIL_BACK_FAIL = TJSWebGLRenderingContextBase.STENCIL_BACK_FAIL;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL = TJSWebGLRenderingContextBase.STENCIL_BACK_PASS_DEPTH_FAIL;
  GL_STENCIL_BACK_PASS_DEPTH_PASS = TJSWebGLRenderingContextBase.STENCIL_BACK_PASS_DEPTH_PASS;
  GL_STENCIL_BACK_REF = TJSWebGLRenderingContextBase.STENCIL_BACK_REF;
  GL_STENCIL_BACK_VALUE_MASK = TJSWebGLRenderingContextBase.STENCIL_BACK_VALUE_MASK;
  GL_STENCIL_BACK_WRITEMASK = TJSWebGLRenderingContextBase.STENCIL_BACK_WRITEMASK;
  GL_VIEWPORT = TJSWebGLRenderingContextBase.VIEWPORT_;
  GL_SCISSOR_BOX = TJSWebGLRenderingContextBase.SCISSOR_BOX;
  GL_COLOR_CLEAR_VALUE = TJSWebGLRenderingContextBase.COLOR_CLEAR_VALUE;
  GL_COLOR_WRITEMASK = TJSWebGLRenderingContextBase.COLOR_WRITEMASK;
  GL_UNPACK_ALIGNMENT = TJSWebGLRenderingContextBase.UNPACK_ALIGNMENT;
  GL_PACK_ALIGNMENT = TJSWebGLRenderingContextBase.PACK_ALIGNMENT;
  GL_MAX_TEXTURE_SIZE = TJSWebGLRenderingContextBase.MAX_TEXTURE_SIZE;
  GL_MAX_VIEWPORT_DIMS = TJSWebGLRenderingContextBase.MAX_VIEWPORT_DIMS;
  GL_SUBPIXEL_BITS = TJSWebGLRenderingContextBase.SUBPIXEL_BITS;
  GL_RED_BITS = TJSWebGLRenderingContextBase.RED_BITS;
  GL_GREEN_BITS = TJSWebGLRenderingContextBase.GREEN_BITS;
  GL_BLUE_BITS = TJSWebGLRenderingContextBase.BLUE_BITS;
  GL_ALPHA_BITS = TJSWebGLRenderingContextBase.ALPHA_BITS;
  GL_DEPTH_BITS = TJSWebGLRenderingContextBase.DEPTH_BITS;
  GL_STENCIL_BITS = TJSWebGLRenderingContextBase.STENCIL_BITS;
  GL_POLYGON_OFFSET_UNITS = TJSWebGLRenderingContextBase.POLYGON_OFFSET_UNITS;
  GL_POLYGON_OFFSET_FACTOR = TJSWebGLRenderingContextBase.POLYGON_OFFSET_FACTOR;
  GL_TEXTURE_BINDING_2D = TJSWebGLRenderingContextBase.TEXTURE_BINDING_2D;
  GL_SAMPLE_BUFFERS = TJSWebGLRenderingContextBase.SAMPLE_BUFFERS;
  GL_SAMPLES = TJSWebGLRenderingContextBase.SAMPLES;
  GL_SAMPLE_COVERAGE_VALUE = TJSWebGLRenderingContextBase.SAMPLE_COVERAGE_VALUE;
  GL_SAMPLE_COVERAGE_INVERT = TJSWebGLRenderingContextBase.SAMPLE_COVERAGE_INVERT;
  GL_COMPRESSED_TEXTURE_FORMATS = TJSWebGLRenderingContextBase.COMPRESSED_TEXTURE_FORMATS;
  GL_DONT_CARE = TJSWebGLRenderingContextBase.DONT_CARE;
  GL_FASTEST = TJSWebGLRenderingContextBase.FASTEST;
  GL_NICEST = TJSWebGLRenderingContextBase.NICEST;
  GL_GENERATE_MIPMAP_HINT = TJSWebGLRenderingContextBase.GENERATE_MIPMAP_HINT;
  GL_BYTE = TJSWebGLRenderingContextBase.BYTE;
  GL_UNSIGNED_BYTE = TJSWebGLRenderingContextBase.UNSIGNED_BYTE;
  GL_SHORT = TJSWebGLRenderingContextBase.SHORT;
  GL_UNSIGNED_SHORT = TJSWebGLRenderingContextBase.UNSIGNED_SHORT;
  GL_INT = TJSWebGLRenderingContextBase.INT;
  GL_UNSIGNED_INT = TJSWebGLRenderingContextBase.UNSIGNED_INT;
  GL_FLOAT = TJSWebGLRenderingContextBase.FLOAT;
  GL_DEPTH_COMPONENT = TJSWebGLRenderingContextBase.DEPTH_COMPONENT;
  GL_ALPHA = TJSWebGLRenderingContextBase.ALPHA;
  GL_RGB = TJSWebGLRenderingContextBase.RGB;
  GL_RGBA = TJSWebGLRenderingContextBase.RGBA;
  GL_LUMINANCE = TJSWebGLRenderingContextBase.LUMINANCE;
  GL_LUMINANCE_ALPHA = TJSWebGLRenderingContextBase.LUMINANCE_ALPHA;
  GL_UNSIGNED_SHORT_4_4_4_4 = TJSWebGLRenderingContextBase.UNSIGNED_SHORT_4_4_4_4;
  GL_UNSIGNED_SHORT_5_5_5_1 = TJSWebGLRenderingContextBase.UNSIGNED_SHORT_5_5_5_1;
  GL_UNSIGNED_SHORT_5_6_5 = TJSWebGLRenderingContextBase.UNSIGNED_SHORT_5_6_5;
  GL_FRAGMENT_SHADER = TJSWebGLRenderingContextBase.FRAGMENT_SHADER;
  GL_VERTEX_SHADER = TJSWebGLRenderingContextBase.VERTEX_SHADER;
  GL_MAX_VERTEX_ATTRIBS = TJSWebGLRenderingContextBase.MAX_VERTEX_ATTRIBS;
  GL_MAX_VERTEX_UNIFORM_VECTORS = TJSWebGLRenderingContextBase.MAX_VERTEX_UNIFORM_VECTORS;
  GL_MAX_VARYING_VECTORS = TJSWebGLRenderingContextBase.MAX_VARYING_VECTORS;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = TJSWebGLRenderingContextBase.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = TJSWebGLRenderingContextBase.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  GL_MAX_TEXTURE_IMAGE_UNITS = TJSWebGLRenderingContextBase.MAX_TEXTURE_IMAGE_UNITS;
  GL_MAX_FRAGMENT_UNIFORM_VECTORS = TJSWebGLRenderingContextBase.MAX_FRAGMENT_UNIFORM_VECTORS;
  GL_SHADER_TYPE = TJSWebGLRenderingContextBase.SHADER_TYPE;
  GL_DELETE_STATUS = TJSWebGLRenderingContextBase.DELETE_STATUS;
  GL_LINK_STATUS = TJSWebGLRenderingContextBase.LINK_STATUS;
  GL_VALIDATE_STATUS = TJSWebGLRenderingContextBase.VALIDATE_STATUS;
  GL_ATTACHED_SHADERS = TJSWebGLRenderingContextBase.ATTACHED_SHADERS;
  GL_ACTIVE_UNIFORMS = TJSWebGLRenderingContextBase.ACTIVE_UNIFORMS;
  GL_ACTIVE_ATTRIBUTES = TJSWebGLRenderingContextBase.ACTIVE_ATTRIBUTES;
  GL_SHADING_LANGUAGE_VERSION = TJSWebGLRenderingContextBase.SHADING_LANGUAGE_VERSION;
  GL_CURRENT_PROGRAM = TJSWebGLRenderingContextBase.CURRENT_PROGRAM;
  GL_NEVER = TJSWebGLRenderingContextBase.NEVER;
  GL_LESS = TJSWebGLRenderingContextBase.LESS;
  GL_EQUAL = TJSWebGLRenderingContextBase.EQUAL;
  GL_LEQUAL = TJSWebGLRenderingContextBase.LEQUAL;
  GL_GREATER = TJSWebGLRenderingContextBase.GREATER;
  GL_NOTEQUAL = TJSWebGLRenderingContextBase.NOTEQUAL;
  GL_GEQUAL = TJSWebGLRenderingContextBase.GEQUAL;
  GL_ALWAYS = TJSWebGLRenderingContextBase.ALWAYS;
  GL_KEEP = TJSWebGLRenderingContextBase.KEEP;
  GL_REPLACE = TJSWebGLRenderingContextBase.REPLACE;
  GL_INCR = TJSWebGLRenderingContextBase.INCR;
  GL_DECR = TJSWebGLRenderingContextBase.DECR;
  GL_INVERT = TJSWebGLRenderingContextBase.INVERT;
  GL_INCR_WRAP = TJSWebGLRenderingContextBase.INCR_WRAP;
  GL_DECR_WRAP = TJSWebGLRenderingContextBase.DECR_WRAP;
  GL_VENDOR = TJSWebGLRenderingContextBase.VENDOR;
  GL_RENDERER = TJSWebGLRenderingContextBase.RENDERER;
  GL_VERSION = TJSWebGLRenderingContextBase.VERSION;
  GL_NEAREST = TJSWebGLRenderingContextBase.NEAREST;
  GL_LINEAR = TJSWebGLRenderingContextBase.LINEAR;
  GL_NEAREST_MIPMAP_NEAREST = TJSWebGLRenderingContextBase.NEAREST_MIPMAP_NEAREST;
  GL_LINEAR_MIPMAP_NEAREST = TJSWebGLRenderingContextBase.LINEAR_MIPMAP_NEAREST;
  GL_NEAREST_MIPMAP_LINEAR = TJSWebGLRenderingContextBase.NEAREST_MIPMAP_LINEAR;
  GL_LINEAR_MIPMAP_LINEAR = TJSWebGLRenderingContextBase.LINEAR_MIPMAP_LINEAR;
  GL_TEXTURE_MAG_FILTER = TJSWebGLRenderingContextBase.TEXTURE_MAG_FILTER;
  GL_TEXTURE_MIN_FILTER = TJSWebGLRenderingContextBase.TEXTURE_MIN_FILTER;
  GL_TEXTURE_WRAP_S = TJSWebGLRenderingContextBase.TEXTURE_WRAP_S;
  GL_TEXTURE_WRAP_T = TJSWebGLRenderingContextBase.TEXTURE_WRAP_T;
  GL_TEXTURE_2D = TJSWebGLRenderingContextBase.TEXTURE_2D;
  GL_TEXTURE = TJSWebGLRenderingContextBase.TEXTURE;
  GL_TEXTURE_CUBE_MAP = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP;
  GL_TEXTURE_BINDING_CUBE_MAP = TJSWebGLRenderingContextBase.TEXTURE_BINDING_CUBE_MAP;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP_POSITIVE_X;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP_NEGATIVE_X;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP_POSITIVE_Y;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP_NEGATIVE_Y;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP_POSITIVE_Z;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = TJSWebGLRenderingContextBase.TEXTURE_CUBE_MAP_NEGATIVE_Z;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = TJSWebGLRenderingContextBase.MAX_CUBE_MAP_TEXTURE_SIZE;
  GL_TEXTURE0 = TJSWebGLRenderingContextBase.TEXTURE0;
  GL_TEXTURE1 = TJSWebGLRenderingContextBase.TEXTURE1;
  GL_TEXTURE2 = TJSWebGLRenderingContextBase.TEXTURE2;
  GL_TEXTURE3 = TJSWebGLRenderingContextBase.TEXTURE3;
  GL_TEXTURE4 = TJSWebGLRenderingContextBase.TEXTURE4;
  GL_TEXTURE5 = TJSWebGLRenderingContextBase.TEXTURE5;
  GL_TEXTURE6 = TJSWebGLRenderingContextBase.TEXTURE6;
  GL_TEXTURE7 = TJSWebGLRenderingContextBase.TEXTURE7;
  GL_TEXTURE8 = TJSWebGLRenderingContextBase.TEXTURE8;
  GL_TEXTURE9 = TJSWebGLRenderingContextBase.TEXTURE9;
  GL_TEXTURE10 = TJSWebGLRenderingContextBase.TEXTURE10;
  GL_TEXTURE11 = TJSWebGLRenderingContextBase.TEXTURE11;
  GL_TEXTURE12 = TJSWebGLRenderingContextBase.TEXTURE12;
  GL_TEXTURE13 = TJSWebGLRenderingContextBase.TEXTURE13;
  GL_TEXTURE14 = TJSWebGLRenderingContextBase.TEXTURE14;
  GL_TEXTURE15 = TJSWebGLRenderingContextBase.TEXTURE15;
  GL_TEXTURE16 = TJSWebGLRenderingContextBase.TEXTURE16;
  GL_TEXTURE17 = TJSWebGLRenderingContextBase.TEXTURE17;
  GL_TEXTURE18 = TJSWebGLRenderingContextBase.TEXTURE18;
  GL_TEXTURE19 = TJSWebGLRenderingContextBase.TEXTURE19;
  GL_TEXTURE20 = TJSWebGLRenderingContextBase.TEXTURE20;
  GL_TEXTURE21 = TJSWebGLRenderingContextBase.TEXTURE21;
  GL_TEXTURE22 = TJSWebGLRenderingContextBase.TEXTURE22;
  GL_TEXTURE23 = TJSWebGLRenderingContextBase.TEXTURE23;
  GL_TEXTURE24 = TJSWebGLRenderingContextBase.TEXTURE24;
  GL_TEXTURE25 = TJSWebGLRenderingContextBase.TEXTURE25;
  GL_TEXTURE26 = TJSWebGLRenderingContextBase.TEXTURE26;
  GL_TEXTURE27 = TJSWebGLRenderingContextBase.TEXTURE27;
  GL_TEXTURE28 = TJSWebGLRenderingContextBase.TEXTURE28;
  GL_TEXTURE29 = TJSWebGLRenderingContextBase.TEXTURE29;
  GL_TEXTURE30 = TJSWebGLRenderingContextBase.TEXTURE30;
  GL_TEXTURE31 = TJSWebGLRenderingContextBase.TEXTURE31;
  GL_ACTIVE_TEXTURE = TJSWebGLRenderingContextBase.ACTIVE_TEXTURE;
  GL_REPEAT = TJSWebGLRenderingContextBase.REPEAT_;
  GL_CLAMP_TO_EDGE = TJSWebGLRenderingContextBase.CLAMP_TO_EDGE;
  GL_MIRRORED_REPEAT = TJSWebGLRenderingContextBase.MIRRORED_REPEAT;
  GL_FLOAT_VEC2 = TJSWebGLRenderingContextBase.FLOAT_VEC2;
  GL_FLOAT_VEC3 = TJSWebGLRenderingContextBase.FLOAT_VEC3;
  GL_FLOAT_VEC4 = TJSWebGLRenderingContextBase.FLOAT_VEC4;
  GL_INT_VEC2 = TJSWebGLRenderingContextBase.INT_VEC2;
  GL_INT_VEC3 = TJSWebGLRenderingContextBase.INT_VEC3;
  GL_INT_VEC4 = TJSWebGLRenderingContextBase.INT_VEC4;
  GL_BOOL = TJSWebGLRenderingContextBase.BOOL;
  GL_BOOL_VEC2 = TJSWebGLRenderingContextBase.BOOL_VEC2;
  GL_BOOL_VEC3 = TJSWebGLRenderingContextBase.BOOL_VEC3;
  GL_BOOL_VEC4 = TJSWebGLRenderingContextBase.BOOL_VEC4;
  GL_FLOAT_MAT2 = TJSWebGLRenderingContextBase.FLOAT_MAT2;
  GL_FLOAT_MAT3 = TJSWebGLRenderingContextBase.FLOAT_MAT3;
  GL_FLOAT_MAT4 = TJSWebGLRenderingContextBase.FLOAT_MAT4;
  GL_SAMPLER_2D = TJSWebGLRenderingContextBase.SAMPLER_2D;
  GL_SAMPLER_CUBE = TJSWebGLRenderingContextBase.SAMPLER_CUBE;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_ENABLED;
  GL_VERTEX_ATTRIB_ARRAY_SIZE = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_SIZE;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_STRIDE;
  GL_VERTEX_ATTRIB_ARRAY_TYPE = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_TYPE;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_NORMALIZED;
  GL_VERTEX_ATTRIB_ARRAY_POINTER = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_POINTER;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = TJSWebGLRenderingContextBase.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  GL_IMPLEMENTATION_COLOR_READ_TYPE = TJSWebGLRenderingContextBase.IMPLEMENTATION_COLOR_READ_TYPE;
  GL_IMPLEMENTATION_COLOR_READ_FORMAT = TJSWebGLRenderingContextBase.IMPLEMENTATION_COLOR_READ_FORMAT;
  GL_COMPILE_STATUS = TJSWebGLRenderingContextBase.COMPILE_STATUS;
  GL_LOW_FLOAT = TJSWebGLRenderingContextBase.LOW_FLOAT;
  GL_MEDIUM_FLOAT = TJSWebGLRenderingContextBase.MEDIUM_FLOAT;
  GL_HIGH_FLOAT = TJSWebGLRenderingContextBase.HIGH_FLOAT;
  GL_LOW_INT = TJSWebGLRenderingContextBase.LOW_INT;
  GL_MEDIUM_INT = TJSWebGLRenderingContextBase.MEDIUM_INT;
  GL_HIGH_INT = TJSWebGLRenderingContextBase.HIGH_INT;
  GL_FRAMEBUFFER = TJSWebGLRenderingContextBase.FRAMEBUFFER;
  GL_RENDERBUFFER = TJSWebGLRenderingContextBase.RENDERBUFFER;
  GL_RGBA4 = TJSWebGLRenderingContextBase.RGBA4;
  GL_RGB5_A1 = TJSWebGLRenderingContextBase.RGB5_A1;
  GL_RGB565 = TJSWebGLRenderingContextBase.RGB565;
  GL_DEPTH_COMPONENT16 = TJSWebGLRenderingContextBase.DEPTH_COMPONENT16;
  GL_STENCIL_INDEX8 = TJSWebGLRenderingContextBase.STENCIL_INDEX8;
  GL_DEPTH_STENCIL = TJSWebGLRenderingContextBase.DEPTH_STENCIL;
  GL_RENDERBUFFER_WIDTH = TJSWebGLRenderingContextBase.RENDERBUFFER_WIDTH;
  GL_RENDERBUFFER_HEIGHT = TJSWebGLRenderingContextBase.RENDERBUFFER_HEIGHT;
  GL_RENDERBUFFER_INTERNAL_FORMAT = TJSWebGLRenderingContextBase.RENDERBUFFER_INTERNAL_FORMAT;
  GL_RENDERBUFFER_RED_SIZE = TJSWebGLRenderingContextBase.RENDERBUFFER_RED_SIZE;
  GL_RENDERBUFFER_GREEN_SIZE = TJSWebGLRenderingContextBase.RENDERBUFFER_GREEN_SIZE;
  GL_RENDERBUFFER_BLUE_SIZE = TJSWebGLRenderingContextBase.RENDERBUFFER_BLUE_SIZE;
  GL_RENDERBUFFER_ALPHA_SIZE = TJSWebGLRenderingContextBase.RENDERBUFFER_ALPHA_SIZE;
  GL_RENDERBUFFER_DEPTH_SIZE = TJSWebGLRenderingContextBase.RENDERBUFFER_DEPTH_SIZE;
  GL_RENDERBUFFER_STENCIL_SIZE = TJSWebGLRenderingContextBase.RENDERBUFFER_STENCIL_SIZE;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = TJSWebGLRenderingContextBase.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = TJSWebGLRenderingContextBase.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = TJSWebGLRenderingContextBase.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = TJSWebGLRenderingContextBase.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  GL_COLOR_ATTACHMENT0 = TJSWebGLRenderingContextBase.COLOR_ATTACHMENT0;
  GL_DEPTH_ATTACHMENT = TJSWebGLRenderingContextBase.DEPTH_ATTACHMENT;
  GL_STENCIL_ATTACHMENT = TJSWebGLRenderingContextBase.STENCIL_ATTACHMENT;
  GL_DEPTH_STENCIL_ATTACHMENT = TJSWebGLRenderingContextBase.DEPTH_STENCIL_ATTACHMENT;
  GL_NONE = TJSWebGLRenderingContextBase.NONE;
  GL_FRAMEBUFFER_COMPLETE = TJSWebGLRenderingContextBase.FRAMEBUFFER_COMPLETE;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = TJSWebGLRenderingContextBase.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = TJSWebGLRenderingContextBase.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = TJSWebGLRenderingContextBase.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  GL_FRAMEBUFFER_UNSUPPORTED = TJSWebGLRenderingContextBase.FRAMEBUFFER_UNSUPPORTED;
  GL_FRAMEBUFFER_BINDING = TJSWebGLRenderingContextBase.FRAMEBUFFER_BINDING;
  GL_RENDERBUFFER_BINDING = TJSWebGLRenderingContextBase.RENDERBUFFER_BINDING;
  GL_MAX_RENDERBUFFER_SIZE = TJSWebGLRenderingContextBase.MAX_RENDERBUFFER_SIZE;
  GL_INVALID_FRAMEBUFFER_OPERATION = TJSWebGLRenderingContextBase.INVALID_FRAMEBUFFER_OPERATION;
  GL_UNPACK_FLIP_Y_WEBGL = TJSWebGLRenderingContextBase.UNPACK_FLIP_Y_WEBGL;
  GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = TJSWebGLRenderingContextBase.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
  GL_CONTEXT_LOST_WEBGL = TJSWebGLRenderingContextBase.CONTEXT_LOST_WEBGL;
  GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = TJSWebGLRenderingContextBase.UNPACK_COLORSPACE_CONVERSION_WEBGL;
  GL_BROWSER_DEFAULT_WEBGL = TJSWebGLRenderingContextBase.BROWSER_DEFAULT_WEBGL;

{ Functions from WebGLRenderingContextBase }
function glGetContextAttributes(): IJSWebGLContextAttributes;
function glIsContextLost(): Boolean;
// Not in auto-generated flat WebGL API: function glGetSupportedExtensions(): Tsequence;
// Not in auto-generated flat WebGL API: function glGetExtension(const name: String): Tobject;
procedure glActiveTexture(const texture: TGLenum);
procedure glAttachShader(const type_: IJSWebGLProgram; const shader: IJSWebGLShader);
procedure glBindAttribLocation(const type_: IJSWebGLProgram; const index: TGLuint; const name: String);
procedure glBindBuffer(const target: TGLenum; const buffer: IJSWebGLBuffer);
procedure glBindFramebuffer(const target: TGLenum; const framebuffer: IJSWebGLFramebuffer);
procedure glBindRenderbuffer(const target: TGLenum; const renderbuffer: IJSWebGLRenderbuffer);
procedure glBindTexture(const target: TGLenum; const texture: IJSWebGLTexture);
procedure glBlendColor(const red: TGLfloat; const green: TGLfloat; const blue: TGLfloat; const alpha: TGLfloat);
procedure glBlendEquation(const mode: TGLenum);
procedure glBlendEquationSeparate(const modeRGB: TGLenum; const modeAlpha: TGLenum);
procedure glBlendFunc(const sfactor: TGLenum; const dfactor: TGLenum);
procedure glBlendFuncSeparate(const srcRGB: TGLenum; const dstRGB: TGLenum; const srcAlpha: TGLenum; const dstAlpha: TGLenum);
function glCheckFramebufferStatus(const target: TGLenum): TGLenum;
procedure glClear(const mask: TGLbitfield);
procedure glClearColor(const red: TGLfloat; const green: TGLfloat; const blue: TGLfloat; const alpha: TGLfloat);
procedure glClearDepth(const depth: TGLclampf);
procedure glClearStencil(const s: TGLint);
procedure glColorMask(const red: TGLboolean; const green: TGLboolean; const blue: TGLboolean; const alpha: TGLboolean);
procedure glCompileShader(const shader: IJSWebGLShader);
procedure glCopyTexImage2D(const target: TGLenum; const level: TGLint; const internalformat: TGLenum; const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei; const border: TGLint);
procedure glCopyTexSubImage2D(const target: TGLenum; const level: TGLint; const xoffset: TGLint; const yoffset: TGLint; const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei);
function glCreateBuffer(): IJSWebGLBuffer;
function glCreateFramebuffer(): IJSWebGLFramebuffer;
function glCreateProgram(): IJSWebGLProgram;
function glCreateRenderbuffer(): IJSWebGLRenderbuffer;
function glCreateShader(const type_: TGLenum): IJSWebGLShader;
function glCreateTexture(): IJSWebGLTexture;
procedure glCullFace(const mode: TGLenum);
procedure glDeleteBuffer(const buffer: IJSWebGLBuffer);
procedure glDeleteFramebuffer(const framebuffer: IJSWebGLFramebuffer);
procedure glDeleteProgram(const type_: IJSWebGLProgram);
procedure glDeleteRenderbuffer(const renderbuffer: IJSWebGLRenderbuffer);
procedure glDeleteShader(const shader: IJSWebGLShader);
procedure glDeleteTexture(const texture: IJSWebGLTexture);
procedure glDepthFunc(const func: TGLenum);
procedure glDepthMask(const flag: TGLboolean);
procedure glDepthRange(const zNear: TGLclampf; const zFar: TGLclampf);
procedure glDetachShader(const type_: IJSWebGLProgram; const shader: IJSWebGLShader);
procedure glDisable(const cap: TGLenum);
procedure glDisableVertexAttribArray(const index: TGLuint);
procedure glDrawArrays(const mode: TGLenum; const first: TGLint; const count: TGLsizei);
procedure glDrawElements(const mode: TGLenum; const count: TGLsizei; const type_: TGLenum; const offset: TGLintptr);
procedure glEnable(const cap: TGLenum);
procedure glEnableVertexAttribArray(const index: TGLuint);
procedure glFinish();
procedure glFlush();
procedure glFramebufferRenderbuffer(const target: TGLenum; const attachment: TGLenum; const renderbuffertarget: TGLenum; const renderbuffer: IJSWebGLRenderbuffer);
procedure glFramebufferTexture2D(const target: TGLenum; const attachment: TGLenum; const textarget: TGLenum; const texture: IJSWebGLTexture; const level: TGLint);
procedure glFrontFace(const mode: TGLenum);
procedure glGenerateMipmap(const target: TGLenum);
function glGetActiveAttrib(const type_: IJSWebGLProgram; const index: TGLuint): IJSWebGLActiveInfo;
function glGetActiveUniform(const type_: IJSWebGLProgram; const index: TGLuint): IJSWebGLActiveInfo;
// Not in auto-generated flat WebGL API: function glGetAttachedShaders(const type_: IJSWebGLProgram): Tsequence;
function glGetAttribLocation(const type_: IJSWebGLProgram; const name: String): TGLint;
function glGetBufferParameter(const target: TGLenum; const pname: TGLenum): Variant;
function glGetParameter(const pname: TGLenum): Variant;
function glGetError(): TGLenum;
function glGetFramebufferAttachmentParameter(const target: TGLenum; const attachment: TGLenum; const pname: TGLenum): Variant;
function glGetProgramParameter(const type_: IJSWebGLProgram; const pname: TGLenum): Variant;
function glGetProgramInfoLog(const type_: IJSWebGLProgram): String;
function glGetRenderbufferParameter(const target: TGLenum; const pname: TGLenum): Variant;
function glGetShaderParameter(const shader: IJSWebGLShader; const pname: TGLenum): Variant;
function glGetShaderPrecisionFormat(const shadertype: TGLenum; const precisiontype: TGLenum): IJSWebGLShaderPrecisionFormat;
function glGetShaderInfoLog(const shader: IJSWebGLShader): String;
function glGetShaderSource(const shader: IJSWebGLShader): String;
function glGetTexParameter(const target: TGLenum; const pname: TGLenum): Variant;
function glGetUniform(const type_: IJSWebGLProgram; const location: IJSWebGLUniformLocation): Variant;
function glGetUniformLocation(const type_: IJSWebGLProgram; const name: String): IJSWebGLUniformLocation;
function glGetVertexAttrib(const index: TGLuint; const pname: TGLenum): Variant;
function glGetVertexAttribOffset(const index: TGLuint; const pname: TGLenum): TGLintptr;
procedure glHint(const target: TGLenum; const mode: TGLenum);
function glIsBuffer(const buffer: IJSWebGLBuffer): TGLboolean;
function glIsEnabled(const cap: TGLenum): TGLboolean;
function glIsFramebuffer(const framebuffer: IJSWebGLFramebuffer): TGLboolean;
function glIsProgram(const type_: IJSWebGLProgram): TGLboolean;
function glIsRenderbuffer(const renderbuffer: IJSWebGLRenderbuffer): TGLboolean;
function glIsShader(const shader: IJSWebGLShader): TGLboolean;
function glIsTexture(const texture: IJSWebGLTexture): TGLboolean;
procedure glLineWidth(const width: TGLfloat);
procedure glLinkProgram(const type_: IJSWebGLProgram);
procedure glPixelStorei(const pname: TGLenum; const param: TGLint);
procedure glPolygonOffset(const factor: TGLfloat; const units: TGLfloat);
procedure glRenderbufferStorage(const target: TGLenum; const internalformat: TGLenum; const width: TGLsizei; const height: TGLsizei);
procedure glSampleCoverage(const value: TGLclampf; const invert: TGLboolean);
procedure glScissor(const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei);
procedure glShaderSource(const shader: IJSWebGLShader; const source: String);
procedure glStencilFunc(const func: TGLenum; const ref: TGLint; const mask: TGLuint);
procedure glStencilFuncSeparate(const face: TGLenum; const func: TGLenum; const ref: TGLint; const mask: TGLuint);
procedure glStencilMask(const mask: TGLuint);
procedure glStencilMaskSeparate(const face: TGLenum; const mask: TGLuint);
procedure glStencilOp(const fail: TGLenum; const zfail: TGLenum; const zpass: TGLenum);
procedure glStencilOpSeparate(const face: TGLenum; const fail: TGLenum; const zfail: TGLenum; const zpass: TGLenum);
procedure glTexParameterf(const target: TGLenum; const pname: TGLenum; const param: TGLfloat);
procedure glTexParameteri(const target: TGLenum; const pname: TGLenum; const param: TGLint);
procedure glUniform1f(const location: IJSWebGLUniformLocation; const x: TGLfloat);
procedure glUniform2f(const location: IJSWebGLUniformLocation; const x: TGLfloat; const y: TGLfloat);
procedure glUniform3f(const location: IJSWebGLUniformLocation; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat);
procedure glUniform4f(const location: IJSWebGLUniformLocation; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat; const w: TGLfloat);
procedure glUniform1i(const location: IJSWebGLUniformLocation; const x: TGLint);
procedure glUniform2i(const location: IJSWebGLUniformLocation; const x: TGLint; const y: TGLint);
procedure glUniform3i(const location: IJSWebGLUniformLocation; const x: TGLint; const y: TGLint; const z: TGLint);
procedure glUniform4i(const location: IJSWebGLUniformLocation; const x: TGLint; const y: TGLint; const z: TGLint; const w: TGLint);
procedure glUseProgram(const type_: IJSWebGLProgram);
procedure glValidateProgram(const type_: IJSWebGLProgram);
procedure glVertexAttrib1f(const indx: TGLuint; const x: TGLfloat);
// Not in auto-generated flat WebGL API: procedure glVertexAttrib1fv(const indx: TGLuint; const values: TFloat32List);
procedure glVertexAttrib2f(const indx: TGLuint; const x: TGLfloat; const y: TGLfloat);
// Not in auto-generated flat WebGL API: procedure glVertexAttrib2fv(const indx: TGLuint; const values: TFloat32List);
procedure glVertexAttrib3f(const indx: TGLuint; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat);
// Not in auto-generated flat WebGL API: procedure glVertexAttrib3fv(const indx: TGLuint; const values: TFloat32List);
procedure glVertexAttrib4f(const indx: TGLuint; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat; const w: TGLfloat);
// Not in auto-generated flat WebGL API: procedure glVertexAttrib4fv(const indx: TGLuint; const values: TFloat32List);
procedure glVertexAttribPointer(const indx: TGLuint; const size: TGLint; const type_: TGLenum; const normalized: TGLboolean; const stride: TGLsizei; const offset: TGLintptr);
procedure glViewport(const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei);
{$endif read_interface}

{$ifdef read_implementation}
function glGetContextAttributes(): IJSWebGLContextAttributes;
begin
  Result := GL.getContextAttributes();
end;

function glIsContextLost(): Boolean;
begin
  Result := GL.isContextLost();
end;

{ Not in auto-generated flat WebGL API:
function glGetSupportedExtensions(): Tsequence;
begin
  Result := GL.getSupportedExtensions();
end;

}
{ Not in auto-generated flat WebGL API:
function glGetExtension(const name: String): Tobject;
begin
  Result := GL.getExtension(name);
end;

}
procedure glActiveTexture(const texture: TGLenum);
begin
  GL.activeTexture(texture);
end;

procedure glAttachShader(const type_: IJSWebGLProgram; const shader: IJSWebGLShader);
begin
  GL.attachShader(type_, shader);
end;

procedure glBindAttribLocation(const type_: IJSWebGLProgram; const index: TGLuint; const name: String);
begin
  GL.bindAttribLocation(type_, index, name);
end;

procedure glBindBuffer(const target: TGLenum; const buffer: IJSWebGLBuffer);
begin
  GL.bindBuffer(target, buffer);
end;

procedure glBindFramebuffer(const target: TGLenum; const framebuffer: IJSWebGLFramebuffer);
begin
  GL.bindFramebuffer(target, framebuffer);
end;

procedure glBindRenderbuffer(const target: TGLenum; const renderbuffer: IJSWebGLRenderbuffer);
begin
  GL.bindRenderbuffer(target, renderbuffer);
end;

procedure glBindTexture(const target: TGLenum; const texture: IJSWebGLTexture);
begin
  GL.bindTexture(target, texture);
end;

procedure glBlendColor(const red: TGLfloat; const green: TGLfloat; const blue: TGLfloat; const alpha: TGLfloat);
begin
  GL.blendColor(red, green, blue, alpha);
end;

procedure glBlendEquation(const mode: TGLenum);
begin
  GL.blendEquation(mode);
end;

procedure glBlendEquationSeparate(const modeRGB: TGLenum; const modeAlpha: TGLenum);
begin
  GL.blendEquationSeparate(modeRGB, modeAlpha);
end;

procedure glBlendFunc(const sfactor: TGLenum; const dfactor: TGLenum);
begin
  GL.blendFunc(sfactor, dfactor);
end;

procedure glBlendFuncSeparate(const srcRGB: TGLenum; const dstRGB: TGLenum; const srcAlpha: TGLenum; const dstAlpha: TGLenum);
begin
  GL.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
end;

function glCheckFramebufferStatus(const target: TGLenum): TGLenum;
begin
  Result := GL.checkFramebufferStatus(target);
end;

procedure glClear(const mask: TGLbitfield);
begin
  GL.clear(mask);
end;

procedure glClearColor(const red: TGLfloat; const green: TGLfloat; const blue: TGLfloat; const alpha: TGLfloat);
begin
  GL.clearColor(red, green, blue, alpha);
end;

procedure glClearDepth(const depth: TGLclampf);
begin
  GL.clearDepth(depth);
end;

procedure glClearStencil(const s: TGLint);
begin
  GL.clearStencil(s);
end;

procedure glColorMask(const red: TGLboolean; const green: TGLboolean; const blue: TGLboolean; const alpha: TGLboolean);
begin
  GL.colorMask(red, green, blue, alpha);
end;

procedure glCompileShader(const shader: IJSWebGLShader);
begin
  GL.compileShader(shader);
end;

procedure glCopyTexImage2D(const target: TGLenum; const level: TGLint; const internalformat: TGLenum; const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei; const border: TGLint);
begin
  GL.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
end;

procedure glCopyTexSubImage2D(const target: TGLenum; const level: TGLint; const xoffset: TGLint; const yoffset: TGLint; const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei);
begin
  GL.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
end;

function glCreateBuffer(): IJSWebGLBuffer;
begin
  Result := GL.createBuffer();
end;

function glCreateFramebuffer(): IJSWebGLFramebuffer;
begin
  Result := GL.createFramebuffer();
end;

function glCreateProgram(): IJSWebGLProgram;
begin
  Result := GL.createProgram();
end;

function glCreateRenderbuffer(): IJSWebGLRenderbuffer;
begin
  Result := GL.createRenderbuffer();
end;

function glCreateShader(const type_: TGLenum): IJSWebGLShader;
begin
  Result := GL.createShader(type_);
end;

function glCreateTexture(): IJSWebGLTexture;
begin
  Result := GL.createTexture();
end;

procedure glCullFace(const mode: TGLenum);
begin
  GL.cullFace(mode);
end;

procedure glDeleteBuffer(const buffer: IJSWebGLBuffer);
begin
  GL.deleteBuffer(buffer);
end;

procedure glDeleteFramebuffer(const framebuffer: IJSWebGLFramebuffer);
begin
  GL.deleteFramebuffer(framebuffer);
end;

procedure glDeleteProgram(const type_: IJSWebGLProgram);
begin
  GL.deleteProgram(type_);
end;

procedure glDeleteRenderbuffer(const renderbuffer: IJSWebGLRenderbuffer);
begin
  GL.deleteRenderbuffer(renderbuffer);
end;

procedure glDeleteShader(const shader: IJSWebGLShader);
begin
  GL.deleteShader(shader);
end;

procedure glDeleteTexture(const texture: IJSWebGLTexture);
begin
  GL.deleteTexture(texture);
end;

procedure glDepthFunc(const func: TGLenum);
begin
  GL.depthFunc(func);
end;

procedure glDepthMask(const flag: TGLboolean);
begin
  GL.depthMask(flag);
end;

procedure glDepthRange(const zNear: TGLclampf; const zFar: TGLclampf);
begin
  GL.depthRange(zNear, zFar);
end;

procedure glDetachShader(const type_: IJSWebGLProgram; const shader: IJSWebGLShader);
begin
  GL.detachShader(type_, shader);
end;

procedure glDisable(const cap: TGLenum);
begin
  GL.disable(cap);
end;

procedure glDisableVertexAttribArray(const index: TGLuint);
begin
  GL.disableVertexAttribArray(index);
end;

procedure glDrawArrays(const mode: TGLenum; const first: TGLint; const count: TGLsizei);
begin
  GL.drawArrays(mode, first, count);
end;

procedure glDrawElements(const mode: TGLenum; const count: TGLsizei; const type_: TGLenum; const offset: TGLintptr);
begin
  GL.drawElements(mode, count, type_, offset);
end;

procedure glEnable(const cap: TGLenum);
begin
  GL.enable(cap);
end;

procedure glEnableVertexAttribArray(const index: TGLuint);
begin
  GL.enableVertexAttribArray(index);
end;

procedure glFinish();
begin
  GL.finish();
end;

procedure glFlush();
begin
  GL.flush();
end;

procedure glFramebufferRenderbuffer(const target: TGLenum; const attachment: TGLenum; const renderbuffertarget: TGLenum; const renderbuffer: IJSWebGLRenderbuffer);
begin
  GL.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
end;

procedure glFramebufferTexture2D(const target: TGLenum; const attachment: TGLenum; const textarget: TGLenum; const texture: IJSWebGLTexture; const level: TGLint);
begin
  GL.framebufferTexture2D(target, attachment, textarget, texture, level);
end;

procedure glFrontFace(const mode: TGLenum);
begin
  GL.frontFace(mode);
end;

procedure glGenerateMipmap(const target: TGLenum);
begin
  GL.generateMipmap(target);
end;

function glGetActiveAttrib(const type_: IJSWebGLProgram; const index: TGLuint): IJSWebGLActiveInfo;
begin
  Result := GL.getActiveAttrib(type_, index);
end;

function glGetActiveUniform(const type_: IJSWebGLProgram; const index: TGLuint): IJSWebGLActiveInfo;
begin
  Result := GL.getActiveUniform(type_, index);
end;

{ Not in auto-generated flat WebGL API:
function glGetAttachedShaders(const type_: IJSWebGLProgram): Tsequence;
begin
  Result := GL.getAttachedShaders(type_);
end;

}
function glGetAttribLocation(const type_: IJSWebGLProgram; const name: String): TGLint;
begin
  Result := GL.getAttribLocation(type_, name);
end;

function glGetBufferParameter(const target: TGLenum; const pname: TGLenum): Variant;
begin
  Result := GL.getBufferParameter(target, pname);
end;

function glGetParameter(const pname: TGLenum): Variant;
begin
  Result := GL.getParameter(pname);
end;

function glGetError(): TGLenum;
begin
  Result := GL.getError();
end;

function glGetFramebufferAttachmentParameter(const target: TGLenum; const attachment: TGLenum; const pname: TGLenum): Variant;
begin
  Result := GL.getFramebufferAttachmentParameter(target, attachment, pname);
end;

function glGetProgramParameter(const type_: IJSWebGLProgram; const pname: TGLenum): Variant;
begin
  Result := GL.getProgramParameter(type_, pname);
end;

function glGetProgramInfoLog(const type_: IJSWebGLProgram): String;
begin
  Result := GL.getProgramInfoLog(type_);
end;

function glGetRenderbufferParameter(const target: TGLenum; const pname: TGLenum): Variant;
begin
  Result := GL.getRenderbufferParameter(target, pname);
end;

function glGetShaderParameter(const shader: IJSWebGLShader; const pname: TGLenum): Variant;
begin
  Result := GL.getShaderParameter(shader, pname);
end;

function glGetShaderPrecisionFormat(const shadertype: TGLenum; const precisiontype: TGLenum): IJSWebGLShaderPrecisionFormat;
begin
  Result := GL.getShaderPrecisionFormat(shadertype, precisiontype);
end;

function glGetShaderInfoLog(const shader: IJSWebGLShader): String;
begin
  Result := GL.getShaderInfoLog(shader);
end;

function glGetShaderSource(const shader: IJSWebGLShader): String;
begin
  Result := GL.getShaderSource(shader);
end;

function glGetTexParameter(const target: TGLenum; const pname: TGLenum): Variant;
begin
  Result := GL.getTexParameter(target, pname);
end;

function glGetUniform(const type_: IJSWebGLProgram; const location: IJSWebGLUniformLocation): Variant;
begin
  Result := GL.getUniform(type_, location);
end;

function glGetUniformLocation(const type_: IJSWebGLProgram; const name: String): IJSWebGLUniformLocation;
begin
  Result := GL.getUniformLocation(type_, name);
end;

function glGetVertexAttrib(const index: TGLuint; const pname: TGLenum): Variant;
begin
  Result := GL.getVertexAttrib(index, pname);
end;

function glGetVertexAttribOffset(const index: TGLuint; const pname: TGLenum): TGLintptr;
begin
  Result := GL.getVertexAttribOffset(index, pname);
end;

procedure glHint(const target: TGLenum; const mode: TGLenum);
begin
  GL.hint(target, mode);
end;

function glIsBuffer(const buffer: IJSWebGLBuffer): TGLboolean;
begin
  Result := GL.isBuffer(buffer);
end;

function glIsEnabled(const cap: TGLenum): TGLboolean;
begin
  Result := GL.isEnabled(cap);
end;

function glIsFramebuffer(const framebuffer: IJSWebGLFramebuffer): TGLboolean;
begin
  Result := GL.isFramebuffer(framebuffer);
end;

function glIsProgram(const type_: IJSWebGLProgram): TGLboolean;
begin
  Result := GL.isProgram(type_);
end;

function glIsRenderbuffer(const renderbuffer: IJSWebGLRenderbuffer): TGLboolean;
begin
  Result := GL.isRenderbuffer(renderbuffer);
end;

function glIsShader(const shader: IJSWebGLShader): TGLboolean;
begin
  Result := GL.isShader(shader);
end;

function glIsTexture(const texture: IJSWebGLTexture): TGLboolean;
begin
  Result := GL.isTexture(texture);
end;

procedure glLineWidth(const width: TGLfloat);
begin
  GL.lineWidth(width);
end;

procedure glLinkProgram(const type_: IJSWebGLProgram);
begin
  GL.linkProgram(type_);
end;

procedure glPixelStorei(const pname: TGLenum; const param: TGLint);
begin
  GL.pixelStorei(pname, param);
end;

procedure glPolygonOffset(const factor: TGLfloat; const units: TGLfloat);
begin
  GL.polygonOffset(factor, units);
end;

procedure glRenderbufferStorage(const target: TGLenum; const internalformat: TGLenum; const width: TGLsizei; const height: TGLsizei);
begin
  GL.renderbufferStorage(target, internalformat, width, height);
end;

procedure glSampleCoverage(const value: TGLclampf; const invert: TGLboolean);
begin
  GL.sampleCoverage(value, invert);
end;

procedure glScissor(const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei);
begin
  GL.scissor(x, y, width, height);
end;

procedure glShaderSource(const shader: IJSWebGLShader; const source: String);
begin
  GL.shaderSource(shader, source);
end;

procedure glStencilFunc(const func: TGLenum; const ref: TGLint; const mask: TGLuint);
begin
  GL.stencilFunc(func, ref, mask);
end;

procedure glStencilFuncSeparate(const face: TGLenum; const func: TGLenum; const ref: TGLint; const mask: TGLuint);
begin
  GL.stencilFuncSeparate(face, func, ref, mask);
end;

procedure glStencilMask(const mask: TGLuint);
begin
  GL.stencilMask(mask);
end;

procedure glStencilMaskSeparate(const face: TGLenum; const mask: TGLuint);
begin
  GL.stencilMaskSeparate(face, mask);
end;

procedure glStencilOp(const fail: TGLenum; const zfail: TGLenum; const zpass: TGLenum);
begin
  GL.stencilOp(fail, zfail, zpass);
end;

procedure glStencilOpSeparate(const face: TGLenum; const fail: TGLenum; const zfail: TGLenum; const zpass: TGLenum);
begin
  GL.stencilOpSeparate(face, fail, zfail, zpass);
end;

procedure glTexParameterf(const target: TGLenum; const pname: TGLenum; const param: TGLfloat);
begin
  GL.texParameterf(target, pname, param);
end;

procedure glTexParameteri(const target: TGLenum; const pname: TGLenum; const param: TGLint);
begin
  GL.texParameteri(target, pname, param);
end;

procedure glUniform1f(const location: IJSWebGLUniformLocation; const x: TGLfloat);
begin
  GL.uniform1f(location, x);
end;

procedure glUniform2f(const location: IJSWebGLUniformLocation; const x: TGLfloat; const y: TGLfloat);
begin
  GL.uniform2f(location, x, y);
end;

procedure glUniform3f(const location: IJSWebGLUniformLocation; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat);
begin
  GL.uniform3f(location, x, y, z);
end;

procedure glUniform4f(const location: IJSWebGLUniformLocation; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat; const w: TGLfloat);
begin
  GL.uniform4f(location, x, y, z, w);
end;

procedure glUniform1i(const location: IJSWebGLUniformLocation; const x: TGLint);
begin
  GL.uniform1i(location, x);
end;

procedure glUniform2i(const location: IJSWebGLUniformLocation; const x: TGLint; const y: TGLint);
begin
  GL.uniform2i(location, x, y);
end;

procedure glUniform3i(const location: IJSWebGLUniformLocation; const x: TGLint; const y: TGLint; const z: TGLint);
begin
  GL.uniform3i(location, x, y, z);
end;

procedure glUniform4i(const location: IJSWebGLUniformLocation; const x: TGLint; const y: TGLint; const z: TGLint; const w: TGLint);
begin
  GL.uniform4i(location, x, y, z, w);
end;

procedure glUseProgram(const type_: IJSWebGLProgram);
begin
  GL.useProgram(type_);
end;

procedure glValidateProgram(const type_: IJSWebGLProgram);
begin
  GL.validateProgram(type_);
end;

procedure glVertexAttrib1f(const indx: TGLuint; const x: TGLfloat);
begin
  GL.vertexAttrib1f(indx, x);
end;

{ Not in auto-generated flat WebGL API:
procedure glVertexAttrib1fv(const indx: TGLuint; const values: TFloat32List);
begin
  GL.vertexAttrib1fv(indx, values);
end;

}
procedure glVertexAttrib2f(const indx: TGLuint; const x: TGLfloat; const y: TGLfloat);
begin
  GL.vertexAttrib2f(indx, x, y);
end;

{ Not in auto-generated flat WebGL API:
procedure glVertexAttrib2fv(const indx: TGLuint; const values: TFloat32List);
begin
  GL.vertexAttrib2fv(indx, values);
end;

}
procedure glVertexAttrib3f(const indx: TGLuint; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat);
begin
  GL.vertexAttrib3f(indx, x, y, z);
end;

{ Not in auto-generated flat WebGL API:
procedure glVertexAttrib3fv(const indx: TGLuint; const values: TFloat32List);
begin
  GL.vertexAttrib3fv(indx, values);
end;

}
procedure glVertexAttrib4f(const indx: TGLuint; const x: TGLfloat; const y: TGLfloat; const z: TGLfloat; const w: TGLfloat);
begin
  GL.vertexAttrib4f(indx, x, y, z, w);
end;

{ Not in auto-generated flat WebGL API:
procedure glVertexAttrib4fv(const indx: TGLuint; const values: TFloat32List);
begin
  GL.vertexAttrib4fv(indx, values);
end;

}
procedure glVertexAttribPointer(const indx: TGLuint; const size: TGLint; const type_: TGLenum; const normalized: TGLboolean; const stride: TGLsizei; const offset: TGLintptr);
begin
  GL.vertexAttribPointer(indx, size, type_, normalized, stride, offset);
end;

procedure glViewport(const x: TGLint; const y: TGLint; const width: TGLsizei; const height: TGLsizei);
begin
  GL.viewport(x, y, width, height);
end;

{$endif read_implementation}
